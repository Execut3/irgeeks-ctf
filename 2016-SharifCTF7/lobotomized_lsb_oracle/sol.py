#!/usr/bin/python

from subprocess import Popen, PIPE

e = 65537
n = 94169898764475155086179365872915864925768243050855426387910613522303337327416930459077578555524838413579345103633071500300104580298306187507383687796776619261744561887287065152410825040924957174425131901014950571780211869823508452987101620679856181308669517708916215765377471785309709279780997993371462202127
c = 84554310261580598058211620872297995265063480196893812976334022270327838015482739129096939702314740821259766144865677921673974339162910708930818463109733348984687023660294660726179053438750361754457786927212462355725758670143043124242928370865662017903815787388480232771504943423128214544949007416507395402507
k = 1
lb = 0
ub = n

p = Popen(["lobotomized_lsb_oracle.vmp.exe", "/decrypt"], stdout=PIPE, stdin=PIPE)

def oracle(c):
	#print c
	p.stdout.readline()
	p.stdin.write(str(c)+"\n")
	v = p.stdout.readline().strip()
	#print "oracle", v
	return int(v)


while True:
	o = oracle((pow(2, k*e, n) * c) % n)
	if k == 848: 
		if o == 1:
			ub = (ub + lb) / 2
		else:
			lb = (ub + lb) / 2
	else:
		if o == 1:
			lb = (ub + lb) / 2
		else:
			ub = (ub + lb) / 2
			
	print hex(lb)
	if lb == ub:
		break
	print k
	k += 1
	
print k
print hex(lb)
#print hex(lb)[2:-1].decode("hex")
print repr(lb)
print ("0"+hex(lb)[2:-1]).decode("hex")
# brute force last byte :) => e
